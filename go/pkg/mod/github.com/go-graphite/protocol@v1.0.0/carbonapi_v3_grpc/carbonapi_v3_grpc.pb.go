// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carbonapi_v3_grpc.proto

package carbonapi_v3_grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import carbonapi_v3_pb "github.com/go-graphite/protocol/carbonapi_v3_pb"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Version
type ProtocolVersionResponse struct {
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ProtocolVersionResponse) Reset()      { *m = ProtocolVersionResponse{} }
func (*ProtocolVersionResponse) ProtoMessage() {}
func (*ProtocolVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_carbonapi_v3_grpc_b849aaed659d0398, []int{0}
}
func (m *ProtocolVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProtocolVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolVersionResponse.Merge(dst, src)
}
func (m *ProtocolVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolVersionResponse proto.InternalMessageInfo

func (m *ProtocolVersionResponse) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*ProtocolVersionResponse)(nil), "carbonapi_v3_grpc.ProtocolVersionResponse")
}
func (this *ProtocolVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtocolVersionResponse)
	if !ok {
		that2, ok := that.(ProtocolVersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ProtocolVersionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carbonapi_v3_grpc.ProtocolVersionResponse{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCarbonapiV3Grpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CarbonV1Client is the client API for CarbonV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarbonV1Client interface {
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProtocolVersionResponse, error)
	FetchMetrics(ctx context.Context, in *carbonapi_v3_pb.MultiFetchRequest, opts ...grpc.CallOption) (*carbonapi_v3_pb.MultiFetchResponse, error)
	FindMetrics(ctx context.Context, in *carbonapi_v3_pb.MultiGlobRequest, opts ...grpc.CallOption) (*carbonapi_v3_pb.MultiGlobResponse, error)
	MetricsInfo(ctx context.Context, in *carbonapi_v3_pb.MultiMetricsInfoRequest, opts ...grpc.CallOption) (*carbonapi_v3_pb.MultiMetricsInfoResponse, error)
	ListMetrics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*carbonapi_v3_pb.ListMetricsResponse, error)
	Stats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*carbonapi_v3_pb.MetricDetailsResponse, error)
}

type carbonV1Client struct {
	cc *grpc.ClientConn
}

func NewCarbonV1Client(cc *grpc.ClientConn) CarbonV1Client {
	return &carbonV1Client{cc}
}

func (c *carbonV1Client) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProtocolVersionResponse, error) {
	out := new(ProtocolVersionResponse)
	err := c.cc.Invoke(ctx, "/carbonapi_v3_grpc.CarbonV1/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carbonV1Client) FetchMetrics(ctx context.Context, in *carbonapi_v3_pb.MultiFetchRequest, opts ...grpc.CallOption) (*carbonapi_v3_pb.MultiFetchResponse, error) {
	out := new(carbonapi_v3_pb.MultiFetchResponse)
	err := c.cc.Invoke(ctx, "/carbonapi_v3_grpc.CarbonV1/FetchMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carbonV1Client) FindMetrics(ctx context.Context, in *carbonapi_v3_pb.MultiGlobRequest, opts ...grpc.CallOption) (*carbonapi_v3_pb.MultiGlobResponse, error) {
	out := new(carbonapi_v3_pb.MultiGlobResponse)
	err := c.cc.Invoke(ctx, "/carbonapi_v3_grpc.CarbonV1/FindMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carbonV1Client) MetricsInfo(ctx context.Context, in *carbonapi_v3_pb.MultiMetricsInfoRequest, opts ...grpc.CallOption) (*carbonapi_v3_pb.MultiMetricsInfoResponse, error) {
	out := new(carbonapi_v3_pb.MultiMetricsInfoResponse)
	err := c.cc.Invoke(ctx, "/carbonapi_v3_grpc.CarbonV1/MetricsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carbonV1Client) ListMetrics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*carbonapi_v3_pb.ListMetricsResponse, error) {
	out := new(carbonapi_v3_pb.ListMetricsResponse)
	err := c.cc.Invoke(ctx, "/carbonapi_v3_grpc.CarbonV1/ListMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carbonV1Client) Stats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*carbonapi_v3_pb.MetricDetailsResponse, error) {
	out := new(carbonapi_v3_pb.MetricDetailsResponse)
	err := c.cc.Invoke(ctx, "/carbonapi_v3_grpc.CarbonV1/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarbonV1Server is the server API for CarbonV1 service.
type CarbonV1Server interface {
	GetVersion(context.Context, *empty.Empty) (*ProtocolVersionResponse, error)
	FetchMetrics(context.Context, *carbonapi_v3_pb.MultiFetchRequest) (*carbonapi_v3_pb.MultiFetchResponse, error)
	FindMetrics(context.Context, *carbonapi_v3_pb.MultiGlobRequest) (*carbonapi_v3_pb.MultiGlobResponse, error)
	MetricsInfo(context.Context, *carbonapi_v3_pb.MultiMetricsInfoRequest) (*carbonapi_v3_pb.MultiMetricsInfoResponse, error)
	ListMetrics(context.Context, *empty.Empty) (*carbonapi_v3_pb.ListMetricsResponse, error)
	Stats(context.Context, *empty.Empty) (*carbonapi_v3_pb.MetricDetailsResponse, error)
}

func RegisterCarbonV1Server(s *grpc.Server, srv CarbonV1Server) {
	s.RegisterService(&_CarbonV1_serviceDesc, srv)
}

func _CarbonV1_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonV1Server).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carbonapi_v3_grpc.CarbonV1/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonV1Server).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarbonV1_FetchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(carbonapi_v3_pb.MultiFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonV1Server).FetchMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carbonapi_v3_grpc.CarbonV1/FetchMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonV1Server).FetchMetrics(ctx, req.(*carbonapi_v3_pb.MultiFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarbonV1_FindMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(carbonapi_v3_pb.MultiGlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonV1Server).FindMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carbonapi_v3_grpc.CarbonV1/FindMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonV1Server).FindMetrics(ctx, req.(*carbonapi_v3_pb.MultiGlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarbonV1_MetricsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(carbonapi_v3_pb.MultiMetricsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonV1Server).MetricsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carbonapi_v3_grpc.CarbonV1/MetricsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonV1Server).MetricsInfo(ctx, req.(*carbonapi_v3_pb.MultiMetricsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarbonV1_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonV1Server).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carbonapi_v3_grpc.CarbonV1/ListMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonV1Server).ListMetrics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarbonV1_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarbonV1Server).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carbonapi_v3_grpc.CarbonV1/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarbonV1Server).Stats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarbonV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carbonapi_v3_grpc.CarbonV1",
	HandlerType: (*CarbonV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _CarbonV1_GetVersion_Handler,
		},
		{
			MethodName: "FetchMetrics",
			Handler:    _CarbonV1_FetchMetrics_Handler,
		},
		{
			MethodName: "FindMetrics",
			Handler:    _CarbonV1_FindMetrics_Handler,
		},
		{
			MethodName: "MetricsInfo",
			Handler:    _CarbonV1_MetricsInfo_Handler,
		},
		{
			MethodName: "ListMetrics",
			Handler:    _CarbonV1_ListMetrics_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _CarbonV1_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carbonapi_v3_grpc.proto",
}

func (m *ProtocolVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCarbonapiV3Grpc(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func encodeVarintCarbonapiV3Grpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProtocolVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCarbonapiV3Grpc(uint64(m.Version))
	}
	return n
}

func sovCarbonapiV3Grpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCarbonapiV3Grpc(x uint64) (n int) {
	return sovCarbonapiV3Grpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProtocolVersionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtocolVersionResponse{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCarbonapiV3Grpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProtocolVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarbonapiV3Grpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarbonapiV3Grpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCarbonapiV3Grpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarbonapiV3Grpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCarbonapiV3Grpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCarbonapiV3Grpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarbonapiV3Grpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarbonapiV3Grpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCarbonapiV3Grpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCarbonapiV3Grpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCarbonapiV3Grpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCarbonapiV3Grpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCarbonapiV3Grpc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("carbonapi_v3_grpc.proto", fileDescriptor_carbonapi_v3_grpc_b849aaed659d0398)
}

var fileDescriptor_carbonapi_v3_grpc_b849aaed659d0398 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x4e, 0xc2, 0x40,
	0x18, 0xc5, 0x3b, 0xf1, 0x6f, 0x06, 0x37, 0x76, 0x21, 0xa4, 0x26, 0x13, 0xad, 0xc6, 0xa0, 0x09,
	0x25, 0x8a, 0x27, 0x50, 0x81, 0x90, 0x48, 0x62, 0x6a, 0x42, 0xe2, 0x8a, 0xb4, 0x65, 0x28, 0x93,
	0x94, 0x4e, 0x6d, 0xa7, 0x24, 0xee, 0x3c, 0x82, 0xde, 0xc2, 0xa3, 0xb8, 0x64, 0xc9, 0x52, 0x86,
	0x8d, 0x4b, 0x8e, 0x60, 0x9c, 0xb6, 0x58, 0x28, 0x10, 0x77, 0xf3, 0xe6, 0x7b, 0xef, 0xf7, 0xbe,
	0x7c, 0x30, 0x6f, 0x19, 0xbe, 0x49, 0x5d, 0xc3, 0x23, 0xed, 0x41, 0xa5, 0x6d, 0xfb, 0x9e, 0xa5,
	0x79, 0x3e, 0x65, 0x54, 0xde, 0xcf, 0x0c, 0x94, 0xaa, 0x4d, 0x58, 0x2f, 0x34, 0x35, 0x8b, 0xf6,
	0xcb, 0x36, 0x2d, 0xd9, 0xbe, 0xe1, 0xf5, 0x08, 0xc3, 0x65, 0x11, 0xb0, 0xa8, 0x53, 0x9e, 0x8b,
	0x78, 0xe6, 0xa2, 0x8e, 0xc8, 0x4a, 0x69, 0x0e, 0x63, 0xd3, 0x28, 0x6f, 0x86, 0x5d, 0xa1, 0x84,
	0x10, 0xaf, 0xd8, 0x7e, 0x68, 0x53, 0x6a, 0x3b, 0xf8, 0xcf, 0x85, 0xfb, 0x1e, 0x7b, 0x89, 0x86,
	0x6a, 0x05, 0xe6, 0x1f, 0xe2, 0xf6, 0x16, 0xf6, 0x03, 0x42, 0x5d, 0x1d, 0x07, 0x1e, 0x75, 0x03,
	0x2c, 0x17, 0xe0, 0xce, 0x20, 0xfa, 0x2a, 0x80, 0x23, 0x50, 0xdc, 0xd0, 0x13, 0x79, 0xf5, 0xbe,
	0x09, 0x77, 0x6f, 0xc5, 0x6a, 0xad, 0x4b, 0x59, 0x87, 0xb0, 0x8e, 0x59, 0x1c, 0x96, 0x0f, 0xb4,
	0xa8, 0x4d, 0x4b, 0xda, 0xb4, 0xea, 0x6f, 0x9b, 0x72, 0xa1, 0x65, 0xef, 0xb4, 0xa2, 0x58, 0x95,
	0xe4, 0x27, 0xb8, 0x57, 0xc3, 0xcc, 0xea, 0x35, 0x31, 0xf3, 0x89, 0x15, 0xc8, 0xaa, 0xb6, 0x78,
	0x89, 0x66, 0xe8, 0x30, 0x22, 0x3c, 0x3a, 0x7e, 0x0e, 0x71, 0xc0, 0x94, 0x93, 0xb5, 0x9e, 0x19,
	0xba, 0x05, 0x73, 0x35, 0xe2, 0x76, 0x12, 0xf2, 0xf1, 0xf2, 0x54, 0xdd, 0xa1, 0x66, 0x02, 0x56,
	0xd7, 0x59, 0x66, 0xdc, 0x0e, 0xcc, 0xc5, 0xcc, 0x86, 0xdb, 0xa5, 0x72, 0x71, 0x79, 0x28, 0x65,
	0x49, 0xf0, 0xe7, 0xff, 0x70, 0xce, 0x5a, 0x9a, 0x30, 0x77, 0x4f, 0x02, 0x96, 0x6c, 0xbf, 0xea,
	0xda, 0xa7, 0x19, 0x66, 0x2a, 0x95, 0xc2, 0x35, 0xe0, 0xd6, 0x23, 0x33, 0xd8, 0x6a, 0xd0, 0x59,
	0x76, 0x39, 0x01, 0xb9, 0xc3, 0xcc, 0x20, 0x4e, 0x0a, 0x75, 0x73, 0x3d, 0x1c, 0x23, 0x69, 0x34,
	0x46, 0xd2, 0x74, 0x8c, 0xc0, 0x2b, 0x47, 0xe0, 0x83, 0x23, 0xf0, 0xc9, 0x11, 0x18, 0x72, 0x04,
	0xbe, 0x38, 0x02, 0xdf, 0x1c, 0x49, 0x53, 0x8e, 0xc0, 0xdb, 0x04, 0x49, 0xc3, 0x09, 0x92, 0x46,
	0x13, 0x24, 0x99, 0xdb, 0xa2, 0xaf, 0xf2, 0x13, 0x00, 0x00, 0xff, 0xff, 0x05, 0xc5, 0x43, 0x5f,
	0x46, 0x03, 0x00, 0x00,
}
